/*
Given two numbers, num1 and num2, represented by linked lists of size n and m respectively. The task is to return a linked list that represents the sum of these two numbers.

For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null. Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. You are required to return the head of the linked list 2->1->5->null.

Note: There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.

Example 1:

Input:
n = 2
num1 = 45 (4->5->null)
m = 3
num2 = 345 (3->4->5->null)
Output: 
3->9->0->null  
Explanation: 
For the given two linked list (4 5) and (3 4 5), after adding the two linked list resultant linked list will be (3 9 0).
Example 2:

Input:
n = 4
num1 = 0063 (0->0->6->3->null)
m = 2
num2 = 07 (0->7->null)
Output: 
7->0->null
Explanation: 
For the given two linked list (0 0 6 3) and (0 7), after adding the two linked list resultant linked list will be (7 0).
Your Task:
The task is to complete the function addTwoLists() which has node reference of both the linked lists and returns the head of the sum list.   

Expected Time Complexity: O(n+m)
Expected Auxiliary Space: O(max(n,m)) for the resultant list.

Constraints:
1 <= n, m <= 104
*/

=====================================================================================================================

/* node for linked list

class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

*/



class Solution{
    
    static Node reverse(Node head){
        
        Node curr = head;
        Node prev = null;
        
        while(curr != null){
            Node next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            
        }
        
        return prev;
        
    }
    
    static Node add(Node first , Node second){
        
        Node dummy = new Node(0);
        Node current = dummy;
        int carry = 0;
        
        while(first != null || second != null || carry > 0){
            
            int sum = carry;
            
            if(first != null){
               sum += first.data;
               first = first.next;
            }
            
             if(second != null){
               sum += second.data;
               second = second.next;
            }
            
            carry = sum/10;
            current.next = new Node(sum%10); 
            current = current.next;
        }
        return dummy.next;
        
    }
    //Function to add two numbers represented by linked list.
    static Node addTwoLists(Node first, Node second){
        // code here
        // return head of sum list
        
        Node list1 = reverse(first);
        Node  list2 = reverse(second);
        
        Node ans = add(list1 , list2);
        
        ans = reverse(ans);
        
        Node cur = ans;
        
        //Avoid leading zeros
        while(cur != null && cur.data == 0){
            cur = cur.next;
        }
        
        return cur == null ? new Node(0) : cur;
    }
    
}

